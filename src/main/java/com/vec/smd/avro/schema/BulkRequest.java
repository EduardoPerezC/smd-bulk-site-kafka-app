/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.vec.smd.avro.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BulkRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7416977871101140198L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BulkRequest\",\"namespace\":\"com.vec.smd.avro.schema\",\"fields\":[{\"name\":\"requestID\",\"type\":\"long\"},{\"name\":\"userID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userEmail\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"not sure if the status will be required so in the meantime , we use union for null values\",\"default\":null},{\"name\":\"bulkItems\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BulkUploadRequestItem\",\"fields\":[{\"name\":\"itemId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"vzSiteId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"customerId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"customerName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"city\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"zipCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"addressLine1\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"addressLine2\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"validationError\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]},\"default\":[]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BulkRequest> ENCODER =
      new BinaryMessageEncoder<BulkRequest>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BulkRequest> DECODER =
      new BinaryMessageDecoder<BulkRequest>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BulkRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BulkRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BulkRequest>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BulkRequest to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BulkRequest from a ByteBuffer. */
  public static BulkRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long requestID;
   private java.lang.String userID;
   private java.lang.String userEmail;
  /** not sure if the status will be required so in the meantime , we use union for null values */
   private java.lang.String status;
   private java.util.List<com.vec.smd.avro.schema.BulkSiteItem> bulkItems;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BulkRequest() {}

  /**
   * All-args constructor.
   * @param requestID The new value for requestID
   * @param userID The new value for userID
   * @param userEmail The new value for userEmail
   * @param status not sure if the status will be required so in the meantime , we use union for null values
   * @param bulkItems The new value for bulkItems
   */
  public BulkRequest(java.lang.Long requestID, java.lang.String userID, java.lang.String userEmail, java.lang.String status, java.util.List<com.vec.smd.avro.schema.BulkSiteItem> bulkItems) {
    this.requestID = requestID;
    this.userID = userID;
    this.userEmail = userEmail;
    this.status = status;
    this.bulkItems = bulkItems;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestID;
    case 1: return userID;
    case 2: return userEmail;
    case 3: return status;
    case 4: return bulkItems;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestID = (java.lang.Long)value$; break;
    case 1: userID = (java.lang.String)value$; break;
    case 2: userEmail = (java.lang.String)value$; break;
    case 3: status = (java.lang.String)value$; break;
    case 4: bulkItems = (java.util.List<com.vec.smd.avro.schema.BulkSiteItem>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'requestID' field.
   * @return The value of the 'requestID' field.
   */
  public java.lang.Long getRequestID() {
    return requestID;
  }


  /**
   * Gets the value of the 'userID' field.
   * @return The value of the 'userID' field.
   */
  public java.lang.String getUserID() {
    return userID;
  }


  /**
   * Gets the value of the 'userEmail' field.
   * @return The value of the 'userEmail' field.
   */
  public java.lang.String getUserEmail() {
    return userEmail;
  }


  /**
   * Gets the value of the 'status' field.
   * @return not sure if the status will be required so in the meantime , we use union for null values
   */
  public java.lang.String getStatus() {
    return status;
  }


  /**
   * Gets the value of the 'bulkItems' field.
   * @return The value of the 'bulkItems' field.
   */
  public java.util.List<com.vec.smd.avro.schema.BulkSiteItem> getBulkItems() {
    return bulkItems;
  }


  /**
   * Creates a new BulkRequest RecordBuilder.
   * @return A new BulkRequest RecordBuilder
   */
  public static com.vec.smd.avro.schema.BulkRequest.Builder newBuilder() {
    return new com.vec.smd.avro.schema.BulkRequest.Builder();
  }

  /**
   * Creates a new BulkRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BulkRequest RecordBuilder
   */
  public static com.vec.smd.avro.schema.BulkRequest.Builder newBuilder(com.vec.smd.avro.schema.BulkRequest.Builder other) {
    return new com.vec.smd.avro.schema.BulkRequest.Builder(other);
  }

  /**
   * Creates a new BulkRequest RecordBuilder by copying an existing BulkRequest instance.
   * @param other The existing instance to copy.
   * @return A new BulkRequest RecordBuilder
   */
  public static com.vec.smd.avro.schema.BulkRequest.Builder newBuilder(com.vec.smd.avro.schema.BulkRequest other) {
    return new com.vec.smd.avro.schema.BulkRequest.Builder(other);
  }

  /**
   * RecordBuilder for BulkRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BulkRequest>
    implements org.apache.avro.data.RecordBuilder<BulkRequest> {

    private long requestID;
    private java.lang.String userID;
    private java.lang.String userEmail;
    /** not sure if the status will be required so in the meantime , we use union for null values */
    private java.lang.String status;
    private java.util.List<com.vec.smd.avro.schema.BulkSiteItem> bulkItems;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.vec.smd.avro.schema.BulkRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestID)) {
        this.requestID = data().deepCopy(fields()[0].schema(), other.requestID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userID)) {
        this.userID = data().deepCopy(fields()[1].schema(), other.userID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userEmail)) {
        this.userEmail = data().deepCopy(fields()[2].schema(), other.userEmail);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bulkItems)) {
        this.bulkItems = data().deepCopy(fields()[4].schema(), other.bulkItems);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BulkRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(com.vec.smd.avro.schema.BulkRequest other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.requestID)) {
        this.requestID = data().deepCopy(fields()[0].schema(), other.requestID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userID)) {
        this.userID = data().deepCopy(fields()[1].schema(), other.userID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userEmail)) {
        this.userEmail = data().deepCopy(fields()[2].schema(), other.userEmail);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bulkItems)) {
        this.bulkItems = data().deepCopy(fields()[4].schema(), other.bulkItems);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'requestID' field.
      * @return The value.
      */
    public java.lang.Long getRequestID() {
      return requestID;
    }

    /**
      * Sets the value of the 'requestID' field.
      * @param value The value of 'requestID'.
      * @return This builder.
      */
    public com.vec.smd.avro.schema.BulkRequest.Builder setRequestID(long value) {
      validate(fields()[0], value);
      this.requestID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestID' field has been set.
      * @return True if the 'requestID' field has been set, false otherwise.
      */
    public boolean hasRequestID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestID' field.
      * @return This builder.
      */
    public com.vec.smd.avro.schema.BulkRequest.Builder clearRequestID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userID' field.
      * @return The value.
      */
    public java.lang.String getUserID() {
      return userID;
    }

    /**
      * Sets the value of the 'userID' field.
      * @param value The value of 'userID'.
      * @return This builder.
      */
    public com.vec.smd.avro.schema.BulkRequest.Builder setUserID(java.lang.String value) {
      validate(fields()[1], value);
      this.userID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userID' field has been set.
      * @return True if the 'userID' field has been set, false otherwise.
      */
    public boolean hasUserID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userID' field.
      * @return This builder.
      */
    public com.vec.smd.avro.schema.BulkRequest.Builder clearUserID() {
      userID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userEmail' field.
      * @return The value.
      */
    public java.lang.String getUserEmail() {
      return userEmail;
    }

    /**
      * Sets the value of the 'userEmail' field.
      * @param value The value of 'userEmail'.
      * @return This builder.
      */
    public com.vec.smd.avro.schema.BulkRequest.Builder setUserEmail(java.lang.String value) {
      validate(fields()[2], value);
      this.userEmail = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userEmail' field has been set.
      * @return True if the 'userEmail' field has been set, false otherwise.
      */
    public boolean hasUserEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userEmail' field.
      * @return This builder.
      */
    public com.vec.smd.avro.schema.BulkRequest.Builder clearUserEmail() {
      userEmail = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * not sure if the status will be required so in the meantime , we use union for null values
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * not sure if the status will be required so in the meantime , we use union for null values
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.vec.smd.avro.schema.BulkRequest.Builder setStatus(java.lang.String value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * not sure if the status will be required so in the meantime , we use union for null values
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'status' field.
      * not sure if the status will be required so in the meantime , we use union for null values
      * @return This builder.
      */
    public com.vec.smd.avro.schema.BulkRequest.Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'bulkItems' field.
      * @return The value.
      */
    public java.util.List<com.vec.smd.avro.schema.BulkSiteItem> getBulkItems() {
      return bulkItems;
    }

    /**
      * Sets the value of the 'bulkItems' field.
      * @param value The value of 'bulkItems'.
      * @return This builder.
      */
    public com.vec.smd.avro.schema.BulkRequest.Builder setBulkItems(java.util.List<com.vec.smd.avro.schema.BulkSiteItem> value) {
      validate(fields()[4], value);
      this.bulkItems = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'bulkItems' field has been set.
      * @return True if the 'bulkItems' field has been set, false otherwise.
      */
    public boolean hasBulkItems() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'bulkItems' field.
      * @return This builder.
      */
    public com.vec.smd.avro.schema.BulkRequest.Builder clearBulkItems() {
      bulkItems = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BulkRequest build() {
      try {
        BulkRequest record = new BulkRequest();
        record.requestID = fieldSetFlags()[0] ? this.requestID : (java.lang.Long) defaultValue(fields()[0]);
        record.userID = fieldSetFlags()[1] ? this.userID : (java.lang.String) defaultValue(fields()[1]);
        record.userEmail = fieldSetFlags()[2] ? this.userEmail : (java.lang.String) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (java.lang.String) defaultValue(fields()[3]);
        record.bulkItems = fieldSetFlags()[4] ? this.bulkItems : (java.util.List<com.vec.smd.avro.schema.BulkSiteItem>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BulkRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<BulkRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BulkRequest>
    READER$ = (org.apache.avro.io.DatumReader<BulkRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
